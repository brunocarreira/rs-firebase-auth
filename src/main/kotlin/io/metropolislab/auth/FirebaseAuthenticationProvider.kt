package io.metropolislab.auth

import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.auth.FirebaseToken
import io.metropolislab.auth.model.FirebaseAuthenticationToken
import io.metropolislab.auth.model.FirebaseUserDetails
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken
import org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider
import org.springframework.security.core.AuthenticationException
import org.springframework.security.core.userdetails.UserDetails
import org.springframework.security.web.authentication.session.SessionAuthenticationException
import org.springframework.stereotype.Component
import java.util.concurrent.ExecutionException

/**
 * Authentication class, where token generated by Firebase will be verified
 */
@Component
class FirebaseAuthenticationProvider(@Autowired var firebaseAuth: FirebaseAuth) : AbstractUserDetailsAuthenticationProvider() {


    override fun supports(authentication: Class<*>): Boolean {
        return FirebaseAuthenticationToken::class.java.isAssignableFrom(authentication)
    }

    @Throws(AuthenticationException::class)
    override fun additionalAuthenticationChecks(userDetails: UserDetails, authentication: UsernamePasswordAuthenticationToken) {
    }

    @Throws(AuthenticationException::class)
    override fun retrieveUser(username: String, authentication: UsernamePasswordAuthenticationToken): UserDetails {
        val authenticationToken = authentication as FirebaseAuthenticationToken

        return try{
            val fbToken = firebaseAuth.verifyIdTokenAsync(authenticationToken.token).get()
            FirebaseUserDetails(id = fbToken.uid, email = fbToken.email ?: "")
        } catch (e: InterruptedException) {
            throw SessionAuthenticationException(e.message)
        } catch (e: ExecutionException) {
            throw SessionAuthenticationException(e.message)
        }
    }
}